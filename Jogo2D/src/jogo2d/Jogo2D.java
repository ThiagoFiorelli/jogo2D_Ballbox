/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jogo2d;

/**
 *
 * @author 160018
 */
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.Random;
import java.awt.Font;

public class Jogo2D
        extends javax.swing.JFrame
        implements Runnable, MouseMotionListener {

    private boolean fimJogo = true;
    private boolean keyRestart;
    private boolean tiro = false;
    private int cursorType = 0;
    private int mousex;
    private int mousey;
    private boolean mousemove = true;
    private int nivel = 1;
    private boolean colidiu = false;
    private boolean vitoria = false;
    private boolean irMenu = true;

    public Jogo2D() {
        setTitle("Ballbox");
        initComponents();
        editarJanela();
        createBufferStrategy(2);
        addMouseMotionListener(this);
        Thread t = new Thread(this);
        t.start();
    }

    public void editarJanela() {
        setSize(1167, 803);
        setLocationRelativeTo(null);
        setVisible(true);
        setLayout(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                break;
            case KeyEvent.VK_RIGHT:
                break;
            case KeyEvent.VK_R:
                keyRestart = true;
                break;
            case KeyEvent.VK_SPACE:
                tiro = true;
                break;
            case KeyEvent.VK_A:
                cursorType = 0;
                break;
            case KeyEvent.VK_W:
                cursorType = 1;
                break;
            case KeyEvent.VK_S:
                cursorType = 2;
                break;
            case KeyEvent.VK_D:
                cursorType = 3;
                break;
            case KeyEvent.VK_M:
                irMenu = true;
                break;
            default:
                break;
        }

    }

    private void formKeyReleased(java.awt.event.KeyEvent evt) {
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_LEFT:
                break;
            case KeyEvent.VK_RIGHT:
                break;
            case KeyEvent.VK_R:
                keyRestart = false;
                break;
            case KeyEvent.VK_SPACE:
                break;
            default:
                break;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jogo2D.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jogo2D().setVisible(true);
            }
        });
    }

    @Override
    public Dimension getPreferredSize() {

        return new Dimension(800, 600);
    }

    @Override
    public void run() {
        Graphics g;

        ArrayList<Basico> lista = new ArrayList();
        ArrayList<Basico> paredes = new ArrayList();
        ArrayList<Basico> lixo = new ArrayList();

        Player player = new Player("img/setaE.png");
        Player playeraux;
        player.setVida(6);
        player.setX(200);
        player.setY(200);
        lista.add(player);

        Menu menu = new Menu("img/menu.png");

        Random r = new Random();

        for (int i = 0; i < 1; i++) {

            Bola b = new Bola("img/bola.png");
            b.setIncX(1);
            b.setIncY(0);
            b.setX(0);
            b.setY(600);
            int red = r.nextInt(255);
            int green = r.nextInt(255);
            int blue = r.nextInt(255);
            b.setCor(new Color(red, green, blue));
            lista.add(b);
        }

        while (true) {
            g = getBufferStrategy().getDrawGraphics();
            //Limpa a tela
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
            //Desenha um oval

            if (nivel == 1) {  //criacao do mapa

                Mapa p5 = new Mapa("img/areia2.jpg");
                p5.setX(5);
                p5.setY(0);
                p5.desenhar(g);

                Mapa p1 = new Mapa("mapa1/parte1.png");
                p1.setX(6);
                p1.setY(30);
                p1.desenhar(g);

                Mapa p1_1 = new Mapa("mapa1/3pBaixo.png");
                p1_1.setX(p1_1.img.getIconWidth() * 3);
                p1_1.setY(p1.img.getIconHeight() + 20);
                p1_1.desenhar(g);

                Mapa p1_2 = new Mapa("mapa1/3pBaixo.png");
                p1_2.setX(0);
                p1_2.setY(30);
                p1_2.desenhar(g);

                paredes.add(p1);
                paredes.add(p1_1);
                paredes.add(p1_2);

                Mapa p2 = new Mapa("mapa1/parte2.png");
                p2.setX(6);
                p2.setY(800 - p2.img.getIconHeight() - 4);
                p2.desenhar(g);

                Mapa p2_1 = new Mapa("mapa1/3pCima.png");
                p2_1.setX(p2_1.img.getIconWidth());
                p2_1.setY(700 - p2.img.getIconHeight() - 32);
                p2_1.desenhar(g);

                Mapa p2_2 = new Mapa("mapa1/3pCima.png");
                p2_2.setX(16 + p2.img.getIconWidth() - p2_2.img.getIconWidth());
                p2_2.setY(700 - p2.img.getIconHeight() - 32);
                p2_2.desenhar(g);

                Mapa p2_3 = new Mapa("mapa1/3pCima.png");
                p2_3.setX(36 + p2.img.getIconWidth() - p2_3.img.getIconWidth() - p2_3.img.getIconWidth());
                p2_3.setY(700 - p2.img.getIconHeight() - 32);
                p2_3.desenhar(g);

                Mapa p2_4 = new Mapa("mapa1/3pCima.png");
                p2_4.setX(0);
                p2_4.setY(800 - p2.img.getIconHeight() - 4);
                p2_4.desenhar(g);

                paredes.add(p2);
                paredes.add(p2_1);
                paredes.add(p2_2);
                paredes.add(p2_3);
                paredes.add(p2_4);

                Mapa p3 = new Mapa("mapa1/parte3.png");
                p3.setX(p1.img.getIconWidth() - 4);
                p3.setY(30);
                p3.desenhar(g);

                paredes.add(p3);

                Mapa p4 = new Mapa("mapa1/parte4.png");
                p4.setX(6);
                p4.setY((30 + 800 - p2.img.getIconHeight() - 4) / 2);
                p4.desenhar(g);

                Mapa p4_1 = new Mapa("mapa1/3pCima.png");
                p4_1.setX(p4_1.img.getIconWidth());
                p4_1.setY(((30 + 800 - p2.img.getIconHeight() - 4) / 2) - p4.img.getIconHeight() + 20);
                p4_1.desenhar(g);

                Mapa p4_2 = new Mapa("mapa1/3pBaixo.png");
                p4_2.setX(p1_1.img.getIconWidth() * 3);
                p4_2.setY((((30 + 800 - p2.img.getIconHeight() - 4) / 2) + p4.img.getIconHeight() - 10));
                p4_2.desenhar(g);

                Mapa p4_3 = new Mapa("mapa1/3pCima.png");
                p4_3.setX(15 + p4.img.getIconWidth() - p4_3.img.getIconWidth());
                p4_3.setY(((30 + 800 - p2.img.getIconHeight() - 4) / 2) - p4.img.getIconHeight() + 20);
                p4_3.desenhar(g);

                paredes.add(p4);
                paredes.add(p4_1);
                paredes.add(p4_2);
                paredes.add(p4_3);

//                Mapa movel = new Mapa("mapa1/3pCima.png");
//                movel.setIncX(0);
//                movel.setIncY(1);
//                movel.setX(4 * movel.img.getIconWidth());
//                movel.setY(0);
//
//                Colisao cMovel = movel.trataColisao(getWidth(), getHeight());
//                if (cMovel == Colisao.DOWN) {
//                    movel.setIncY(-1);
//                } else if (cMovel == Colisao.UP) {
//                    movel.setIncY(1);
//                }
//
//                if (tiro) {
//                    movel.desenhar(g);
//                    movel.mover();
//                }
//
//                paredes.add(movel);

                //condicao de vitoria para este mapa
                lista.forEach((b) -> {
                    Colisao aux = b.trataColisao(getWidth(), getHeight());
                    if (aux == Colisao.LEFT && b.getY() <= 400) {
                        lixo.add(b);
                        vitoria = true;
                    }
                });

            }

            for (int x = 1; x <= player.getVida(); x++) {
                Vida vida = new Vida("img/vida.png");
                vida.setX(-5 + (x * 33));
                vida.setY(50);
                vida.desenhar(g);
            }

            player.desenhar(g);

            //formatos do cursor
            switch (cursorType) {
                case 0:
                    playeraux = new Player("img/setaE.png");
                    player.setImg(playeraux.getImg());
                    break;
                case 1:
                    playeraux = new Player("img/setaC.png");
                    player.setImg(playeraux.getImg());
                    break;
                case 2:
                    playeraux = new Player("img/setaB.png");
                    player.setImg(playeraux.getImg());
                    break;
                case 3:
                    playeraux = new Player("img/setaD.png");
                    player.setImg(playeraux.getImg());
                    break;
                default:
                    break;
            }

            //colisao com parede
            lista.forEach((b) -> {
                paredes.stream().filter((p) -> (b.colisao(p))).map((_item) -> {
                    lixo.add(b);
                    return _item;
                }).map((_item) -> {
                    tiro = false;
                    return _item;
                }).forEachOrdered((_item) -> {
                    colidiu = true;
                });
            });

            //remove vida se colidir
            if (colidiu) {
                player.setVida(player.getVida() - 1);
                colidiu = false;
            }

            //Colisao Player com Bola
            lista.stream().filter((b) -> (player.colisao(b))).forEachOrdered((b) -> {
                switch (cursorType) {
                    case 0:
                        b.setIncX(-1);
                        b.setIncY(0);
                        break;
                    case 1:
                        b.setIncX(0);
                        b.setIncY(-1);
                        break;
                    case 2:
                        b.setIncX(0);
                        b.setIncY(+1);
                        break;
                    case 3:
                        b.setIncX(+1);
                        b.setIncY(0);
                        break;
                    default:
                        break;
                }
            });

            if (this.mousemove) {
                player.setX(this.mousex - (player.img.getIconWidth() / 2));
                player.setY(this.mousey - (player.img.getIconHeight() / 2));
            }

            if (tiro) {
                lista.forEach((b) -> {
                    b.mover();
                });

                for (Basico b : lista) {
                    b.desenhar(g);
                }

            }

            lista.removeAll(lixo);
            lixo.clear();

            //se a bola colidir permite lancar mais uma ate a vida ser 0
            if (lista.isEmpty() && tiro && player.getVida() > 0) {
                for (int i = 0; i < 1; i++) {
                    Bola b = new Bola("img/bola.png");
                    b.setIncX(1);
                    b.setIncY(0);
                    b.setX(0);
                    b.setY(600);
                    int red = r.nextInt(255);
                    int green = r.nextInt(255);
                    int blue = r.nextInt(255);
                    b.setCor(new Color(red, green, blue));
                    lista.add(b);
                }
            }

            //se a vida for menor que 0 o jogo acaba
            if (player.getVida() <= 0) {
                g.setColor(Color.WHITE);
                g.setFont(new Font("Arial", 1, 25));
                g.drawString("FIM de JOGO - Tecle R para Reiniciar", 380, 402);

                fimJogo = true;
            }

            //se a bola chegar ao destino o player ganha
            if (vitoria) {
                g.setColor(Color.WHITE);
                g.setFont(new Font("Arial", 1, 40));
                g.drawString("PARABÉNS! Você chegou ao fim!", 280, 352);
                tiro = false;

                player.setVida(0);
                fimJogo = true;
            }

            if (irMenu && !tiro && player.getVida() == 5) {
                menu.desenhar(g);

            }

            //se a vida acabar e o jogador nao chegar ao destino o jogo acaba
            if (fimJogo && keyRestart && player.getVida() <= 0) {
                for (int i = 0; i < 1; i++) {
                    Bola b = new Bola("img/bola.png");
                    b.setIncX(1);
                    b.setIncY(0);
                    b.setX(0);
                    b.setY(600);
                    int red = r.nextInt(255);
                    int green = r.nextInt(255);
                    int blue = r.nextInt(255);
                    b.setCor(new Color(red, green, blue));
                    player.setVida(5);
                    tiro = false;
                    vitoria = false;
                    lista.add(b);
                }

                fimJogo = false;

            }

            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(0);
            } catch (InterruptedException ex) {
            }
        }

    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
    @Override
    public void mouseDragged(MouseEvent e) {

    }

    @Override
    public void mouseMoved(MouseEvent e) {

        this.mousex = e.getX();
        this.mousey = e.getY();
        this.mousemove = true;
    }
}
